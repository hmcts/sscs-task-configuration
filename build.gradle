plugins {
  id 'application'
  id 'checkstyle'
  id 'pmd'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.1.7'
  id 'org.springframework.boot' version '3.5.6'
  id 'com.github.ben-manes.versions' version '0.53.0'
  id 'org.owasp.dependencycheck' version '12.1.2'
  id 'org.sonarqube' version '4.3.0.3225'
  id 'info.solidsoft.pitest' version '1.9.11'
  id 'io.freefair.lombok' version '8.14.2'
}

apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: "info.solidsoft.pitest"

group = 'uk.gov.hmcts.reform'
version = '0.0.1'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(17)
  }
}

sourceSets {
  functionalTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/functionalTest/java')
    }
    resources.srcDir file('src/functionalTest/resources')
  }

  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }

  smokeTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/smokeTest/java')
    }
    resources.srcDir file('src/smokeTest/resources')
  }
}

processFunctionalTestResources {
  duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

processIntegrationTestResources {
  duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.withType(JavaCompile).configureEach {
  options.compilerArgs << "-Xlint:unchecked"
}

tasks.withType(Test).configureEach {
  useJUnitPlatform()

  testLogging {
    exceptionFormat = 'full'
  }
}

test {
  failFast = true
}

tasks.register('functional', Test) {
  description = "Runs functional tests"
  group = "Verification"
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
}

tasks.register('integration', Test) {
  description = "Runs integration tests"
  group = "Verification"
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  failFast = true
}

tasks.register('smoke', Test) {
  description = "Runs Smoke Tests"
  testClassesDirs = sourceSets.smokeTest.output.classesDirs
  classpath = sourceSets.smokeTest.runtimeClasspath
}

tasks.register('tests') {
  description = "Runs junit , integration and functional tests"
  group = "Verification"
  dependsOn test, integration, smoke, functional
}

checkstyle {
  maxWarnings = 0
  toolVersion = '8.29'
  getConfigDirectory().set(new File(rootDir, 'config/checkstyle'))
}

pmd {
  toolVersion = "6.55.0"
  sourceSets = [sourceSets.main]
  reportsDir = layout.buildDirectory.dir("reports/pmd").get().asFile
  // https://github.com/pmd/pmd/issues/876
  ruleSets = []
  ruleSetFiles = files("config/pmd/ruleset.xml")
}

jacocoTestCoverageVerification {
  violationRules {
    rule {
      excludes = ["com.gargoylesoftware.htmlunit.javascript.host.css.StyleAttributes"]
    }
  }
}

jacocoTestReport {
  executionData(test, integration)
  reports {
    xml.required = true
    csv.required = false
    xml.outputLocation = layout.buildDirectory.file("reports/jacoco/test/jacocoTestReport.xml")
  }
}

pitest {
  junit5PluginVersion = '0.12'
  targetClasses = ['uk.gov.hmcts.reform.sscstaskconfiguration.*']
  excludedClasses = [
    'uk.gov.hmcts.reform.sscstaskconfiguration.config.*',
    'uk.gov.hmcts.reform.sscstaskconfiguration.Application'
  ]
  threads = 10
  outputFormats = ['XML', 'HTML']
  timestampedReports = false
  mutationThreshold = 80
}

project.tasks.named('pitest') {
  group = "Verification"
}


project.tasks.named('sonarqube') {
  dependsOn test, integration, jacocoTestReport
}

sonarqube {
  properties {
    property "sonar.projectName", "Reform :: sscs-task-configuration"
    property "sonar.projectKey", "uk.gov.hmcts.reform:sscs-task-configuration"
    property "sonar.coverage.jacoco.xmlReportPaths", "${jacocoTestReport.reports.xml.outputLocation}"
    property "sonar.pitest.mode", "reuseReport"
    property "sonar.pitest.reportsDirectory", "build/reports/pitest"
    property "sonar.exclusions", "src/main/java/uk/gov/hmcts/reform/sscstaskconfiguration/config/**," +
      "src/main/java/uk/gov/hmcts/reform/sscstaskconfiguration/Application.java"
  }
}

// before committing a change, make sure task still works
dependencyUpdates {
  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
    def regex = /^[0-9,.v-]+$/
    return !stableKeyword && !(version ==~ regex)
  }
  rejectVersionIf { selection -> // <---- notice how the closure argument is named
    return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
  }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  // Specifies if the build should be failed if a CVSS score above a specified level is identified.
  // range of 0-10 fails the build, anything greater and it doesn't fail the build
  failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
  suppressionFile = 'config/owasp/suppressions.xml'

  analyzers {
    // Disable scanning of .NET related binaries
    assemblyEnabled = false
  }
}

dependencyManagement {
  dependencies {

    dependency group: 'org.bouncycastle', name: 'bcpkix-jdk15on', version: '1.70'

    dependency group: 'com.google.guava', name: 'guava',version: '33.5.0-jre'

    dependency group: 'org.yaml', name: 'snakeyaml',version: '2.5'

    dependency group: 'org.glassfish', name: 'jakarta.el', version: '4.0.2'

    dependency group: 'commons-io', name: 'commons-io', version: '2.20.0'

    dependencySet(group: 'ch.qos.logback', version: '1.5.20') {
      entry 'logback-classic'
      entry 'logback-core'
    }

    dependencySet(group: 'com.fasterxml.jackson.core', version: '2.18.3') {
      entry 'jackson-databind'
      entry 'jackson-core'
      entry 'jackson-annotations'
    }

  }
}

repositories {
  mavenLocal()
  maven {
    url 'https://pkgs.dev.azure.com/hmcts/Artifacts/_packaging/hmcts-lib/maven/v1'
  }
  mavenCentral()
}

def versions = [
  junit           : '5.14.0',
  junitPlatform   : '1.14.0',
  reformLogging   : '6.1.9',
  camunda         : '7.17.0',
  pitest          : '1.11.3',
  sonarPitest     : '0.5',
  tomcat          : '11.0.11'
]

ext.libraries = [
  junit5: [
    "org.junit.jupiter:junit-jupiter-api:${versions.junit}",
    "org.junit.jupiter:junit-jupiter-engine:${versions.junit}",
    "org.junit.jupiter:junit-jupiter-params:${versions.junit}",
    "org.junit.platform:junit-platform-commons:${versions.junitPlatform}",
    "org.junit.platform:junit-platform-engine:${versions.junitPlatform}"
  ]
]

dependencies {

  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: springBoot.class.package.implementationVersion
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator', version: springBoot.class.package.implementationVersion
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop', version: springBoot.class.package.implementationVersion
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-json', version: springBoot.class.package.implementationVersion

  implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: '2.8.13'

  implementation group: 'com.github.hmcts.java-logging', name: 'logging', version: versions.reformLogging
  implementation group: 'com.github.hmcts.java-logging', name: 'logging-appinsights', version: versions.reformLogging
  implementation group: 'net.logstash.logback', name: 'logstash-logback-encoder', version: '8.1'

  implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: versions.log4j
  implementation group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: versions.log4j

  implementation group: 'org.apache.tomcat.embed', name: 'tomcat-embed-core', version: versions.tomcat
  implementation group: 'org.apache.tomcat.embed', name: 'tomcat-embed-websocket', version: versions.tomcat

  implementation group: 'org.camunda.bpm', name: 'camunda-external-task-client', version: versions.camunda

  implementation group: 'org.pitest', name: 'pitest', version:  versions.pitest
  implementation group:'info.solidsoft.gradle.pitest', name: 'gradle-pitest-plugin', version: pitest.pitestVersion.get()
  implementation group:'org.codehaus.sonar-plugins', name:'sonar-pitest-plugin', version: versions.sonarPitest

  implementation group: 'jakarta.servlet', name: 'jakarta.servlet-api', version: '6.1.0'
  implementation group: 'jakarta.xml.bind', name: 'jakarta.xml.bind-api', version: '4.0.4'

  testImplementation(platform('org.junit:junit-bom:5.14.0'))
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', {
    exclude group: 'junit', module: 'junit'
    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
  }

  testImplementation group: 'org.camunda.bpm.dmn', name: 'camunda-engine-dmn', version: versions.camunda
  testImplementation group: 'org.camunda.bpm.assert', name: 'camunda-bpm-assert', version: '8.0.0'
  testImplementation group: 'org.camunda.bpm', name: 'camunda-engine', version: versions.camunda
  testImplementation group: 'com.h2database', name: 'h2', version: '1.4.200'
  testImplementation group: 'org.apiguardian', name: 'apiguardian-api', version: '1.1.2'

  integrationTestImplementation sourceSets.main.runtimeClasspath
  integrationTestImplementation sourceSets.test.runtimeClasspath

  functionalTestImplementation sourceSets.main.runtimeClasspath

  smokeTestImplementation sourceSets.main.runtimeClasspath
}

application {
  mainClass.set('uk.gov.hmcts.reform.sscstaskconfiguration.Application')
}

bootJar {
  getArchiveFileName().set(provider {
    'sscs-task-configuration.jar'
  })

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

wrapper {
  distributionType = Wrapper.DistributionType.ALL
}
